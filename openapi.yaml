openapi: 3.1.0
info:
  title: SenseThis
  version: '1.0'
  description: 'API documentation for SenseThis devices, account and user management'
servers:
  - url: api.sensethis.com/v1
    description: Primary API Server
  - url: api2.sensethis.com/v1
    description: Secondary API Server
  - url: auth.sensethis.com/v1
    description: Primary Auth Server
  - url: auth2.sensethis.com/v1
    description: Secondary Auth Server
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags:
        - Users
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      tags:
        - Users
  /users/verification:
    post:
      summary: Request Email Address Verification
      tags:
        - Accounts
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
      operationId: post-users-verifications
      description: Request Email Address Verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                userId:
                  type: integer
            examples: {}
    parameters: []
  '/users/verifications/{verificationId}':
    get:
      summary: Verify Email Address2
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
      operationId: get-users-verifications
      description: Validate Email Address using Token and User ID provided from email link
      parameters:
        - schema:
            type: string
          in: header
          name: token
        - schema:
            type: string
          in: header
          name: userId
      tags:
        - Accounts
    parameters:
      - schema:
          type: string
        name: verificationId
        in: path
        required: true
  /accounts:
    post:
      summary: Create a new account
      tags: []
      responses: {}
      operationId: post-accounts
      description: 'Creates a new account, new aaccount administrator and sends a verification email to the email provided'
      x-internal: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  username: bob123
                  password: somePassword
                  first_name: Bob
                  last_name: Andrews
                  email: bobandrews@email.com
                  country: 1
                  timezone: EST
                  language_id: 1
                  dislay_in_metric: true
              properties:
                username:
                  type: string
                  description: Username that will be used to login to the account
                password:
                  type: string
                  description: Password that will be used to login to the account
                firstName:
                  type: string
                  description: First name of the user account
                lastName:
                  type: string
                  description: Last name of the user account
                email:
                  type: string
                  description: email address used for alerts and notifications
                country:
                  type: integer
                  description: 'Optional: Country code for user account'
                timezone:
                  type: string
                  description: Timezone for user account
                languageId:
                  type: integer
                dislayInMetric:
                  type: boolean
              required:
                - username
                - password
                - firstName
                - lastName
                - email
                - timezone
                - languageId
                - dislayInMetric
            examples: {}
    parameters: []
components:
  schemas:
    User:
      title: Accounts
      type: object
      description: Create and edit account info
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
      x-internal: false
  securitySchemes: {}
  responses:
    Success:
      description: Success Response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              response:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
          examples:
            Success:
              value:
                success: true
                response:
                  code: 1
                  message: Success
    Error:
      description: Error Response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              response:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
            x-examples:
              example-1:
                success: false
                response:
                  code: 0
                  message: string
          examples:
            Error:
              value:
                success: false
                response:
                  code: 2
                  message: Invalid Parameter
